plugins {
    id 'idea'
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'com.google.cloud.tools.jib' version '2.2.0'
}

repositories {
    mavenCentral()
}

group = 'io.jacocoanalyzer'
version = '0.1.3'
java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

// jibDockerBuild target. Run with docker run -p 8080:8080 jacocoanalyzer/rqlcoverage
//jib.to.image = 'marstein65/jacocoanalyzer'
//tasks.build.dependsOn tasks.jib
/*
jib {
    from {
        image = 'adoptopenjdk/openjdk11'
    }
    to {
        image = 'gcr.io/turing-runner-277119/jacocoanalyzer'
        credHelper = 'gcr'
    }
    tags {
        tag = latest
    }
    container {
        mainClass = 'io.jacocoanalyzer.JacocoAnalyzerApplication'
        args = ['-w']
        user = 'spring:spring'
    }
}
*/


repositories {
    mavenCentral()
}

bootJar {
    // The base name is in the settings.gradle file!
    archiveFileName = "${archiveBaseName.get()}.${archiveVersion.get()}.${archiveExtension.get()}"
    mainClassName = 'io.jacocoanalyzer.JacocoAnalyzerApplication'
}

bootRun {
    environment([DATABASE_USER: "postgres",
                 DATABASE_PASS: 'postgres',
                 DATABASE_NAME: 'rqlcoverage',
                 DATABASE_HOST: 'localhost'])
}

dependencies {
    // Spring Boot's JPA support
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')

    // Spring Data REST support
    implementation('org.springframework.boot:spring-boot-starter-data-rest')

    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-web')
    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf')
    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-actuator')

    // PostgresSQL-specific connector for JPA
    implementation('org.postgresql:postgresql:9.4-1206-jdbc42')

    // Lombok autogenerates things like getters and setters
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    // https://mvnrepository.com/artifact/org.jetbrains/annotations
//    implementation group: 'org.jetbrains', name: 'annotations', version: '19.0.0'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-core
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    // https://mvnrepository.com/artifact/commons-cli/commons-cli
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.4'
    compile group: 'com.google.guava', name: 'guava', version: '11.0.2'

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')
    testImplementation('com.h2database:h2')
}

test {
    useJUnitPlatform()
    // remove for H2 testing.
    environment([DATABASE_USER: "postgres",
                 DATABASE_PASS: 'postgres',
                 DATABASE_NAME: 'rqlcoverage',
                 DATABASE_HOST: 'localhost'])
}
